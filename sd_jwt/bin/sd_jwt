#!/usr/bin/env python3
import argparse
import json
import logging
import sys
import pathlib

import yaml

from sd_jwt import __version__
from sd_jwt.demo_utils import print_decoded_repr, get_jwk, print_repr
from sd_jwt.utils import generate_salt
from sd_jwt.operations import SDJWT

logger = logging.getLogger("sd_jwt")


parser = argparse.ArgumentParser(
    description=f"{__file__} demo.",
    epilog=f"{__file__}",
    formatter_class=argparse.RawTextHelpFormatter,
)
parser.add_argument(
    "example",
    help=(
        "Yaml file containing the SD-JWT demo to process. See examples/simple.yml for an example."
    ),
    type=pathlib.Path,
)
parser.add_argument(
    "-d",
    "--debug",
    required=False,
    choices=("CRITICAL", "ERROR", "WARNING", "INFO", "DEBUG"),
    default="INFO",
    help="Debug level, see python logging; defaults to INFO if omitted",
)
parser.add_argument(
    "-nr",
    "--no-randomness",
    required=False,
    action="store_true",
    default=False,
    help=(
        "For the purpose of generating static examples for the spec, this command line "
        "switch disables randomness. Using this in production is highly insecure!"
    ),
)
parser.add_argument(
    "--nonce",
    required=False,
    type=str,
    default=generate_salt(),
    help=("given example of a salt: 'XZOUco1u_gEPknxS78sWWg'"),
)
parser.add_argument(
    "--iat", required=False, type=int, help=("issued at, UTC Timestamp")
)
parser.add_argument(
    "--exp", required=False, type=int, help=("expire at, UTC Timestamp")
)
parser.add_argument(
    "--settings-path",
    required=False,
    type=str,
    help=("path/to/settings.py - this path/to requires a __init__.py file."),
)
parser.add_argument(
    "--indent",
    required=False,
    type=int,
    default=4,
    help=("json output indentation level"),
)
parser.add_argument(
    "--replace-examples-in",
    required=False,
    type=pathlib.Path,
    help=(
        "path/to/main.md - Do not output examples, but replace all the examples in the specs"
    ),
)
parser.add_argument(
    "-v",
    "--version",
    required=False,
    action="store_true",
    help="Print version and exit",
)

_args = parser.parse_args()
logger.setLevel(_args.debug)

if _args.version:
    sys.exit(f"{__version__}")

### Load settings

if _args.settings_path:
    sys.path.append(_args.settings_path)
    import settings
else:
    import sd_jwt.demo_settings as settings

# They may come from a custom python settings file
jwk_kwargs = {
    "iss_key": settings.ISSUER_KEY_DICT,
    "holder_key": settings.HOLDER_KEY_DICT,
    "key_size": settings.DEFAULT_KEY_SIZE,
    "kty": settings.DEFAULT_KTY,
}
_JWKS = get_jwk(jwk_kwargs, _args.no_randomness)
ISSUER_KEY = _JWKS["ISSUER_KEY"]
HOLDER_KEY = _JWKS["HOLDER_KEY"]
ISSUER_PUBLIC_KEY = _JWKS["ISSUER_PUBLIC_KEY"]


### Load example file

example_identifer = _args.example.stem

with open(_args.example, "r") as f:
    example = yaml.load(f, Loader=yaml.FullLoader)

for property in ("user_claims", "claims_structure", "disclosed_claims"):
    if property not in example:
        sys.exit(f"Example file must define '{property}'.")

### Produce SD-JWT and SVC for selected example

sdjwt_at_issuer = SDJWT(
    example["user_claims"],
    settings.ISSUER,
    ISSUER_KEY,
    HOLDER_KEY,
    example["claims_structure"],
    example.get("blinded_claim_names", []),
    iat=_args.iat,
    exp=_args.exp,
)

### Produce SD-JWT-R for selected example

# Note: The only input from the issuer is the combined SD-JWT and SVC!

sdjwt_at_holder = SDJWT.from_combined_sd_jwt_svc(sdjwt_at_issuer.combined_sd_jwt_svc)

sdjwt_at_holder.create_sd_jwt_release(
    _args.nonce,
    settings.VERIFIER,
    example["disclosed_claims"],
    HOLDER_KEY,
)

### Verify the SD-JWT using the SD-JWT-R

# Note: The only input from the holder is the combined presentation!

sdjwt_at_verifier = SDJWT.from_combined_presentation(
    sdjwt_at_holder.combined_presentation
)

vc = sdjwt_at_verifier.verify(
    ISSUER_PUBLIC_KEY,
    settings.ISSUER,
    HOLDER_KEY,
    settings.VERIFIER,
    _args.nonce,
)


### Done - now output everything to CLI (unless --replace-examples-in was used)

_artifacts = {
    "user_claims": (example["user_claims"], "User Claims"),
    "sd_jwt_payload": (sdjwt_at_issuer.sd_jwt_payload, "Payload of the SD-JWT"),
    "serialized_sd_jwt": (sdjwt_at_issuer.serialized_sd_jwt, "Serialized SD-JWT"),
    "svc_payload": (
        sdjwt_at_issuer.svc_payload,
        "Payload of the Salt/Value Container (SVC)",
    ),
    "serialized_svc": (sdjwt_at_issuer.serialized_svc, "Serialized SVC"),
    "combined_sd_jwt_svc": (
        sdjwt_at_issuer.combined_sd_jwt_svc,
        "Combined SD-JWT and SVC representation",
    ),
    "sd_jwt_release_payload": (
        sdjwt_at_holder.sd_jwt_release_payload,
        "Payload of the SD-JWT-Release",
    ),
    "serialized_sd_jwt_release": (
        sdjwt_at_holder.serialized_sd_jwt_release,
        "Serialized SD-JWT-Release",
    ),
    "combined_sd_jwt_sd_jwt_release": (
        sdjwt_at_holder.combined_presentation,
        "Combined representation of SD-JWT and SD-JWT-R",
    ),
    "verified_contents": (vc, "Verified released contents of the SD-JWT"),
}


if not _args.replace_examples_in:

    for key, (data, description) in _artifacts.items():
        print(f"{description} ({key}):")
        if isinstance(data, dict):
            print_repr(json.dumps(data, indent=_args.indent))
        else:
            print_repr(data)

        # Small hack to display some values in decoded form
        if key.startswith("serialized_"):
            print(" - decodes to - ")
            print_decoded_repr(data)

    sys.exit(0)


### Otherwise, update examples in the spec

from sd_jwt.replace_utils import replace_all_in_file

logger.info(f"Replacing the placeholders in the '{_args.replace_examples_in}' file.")

replace_all_in_file(
    _args.replace_examples_in,
    _artifacts,
    f"example-{example_identifer}-",
    ignore_missing_placeholders=True,
)
